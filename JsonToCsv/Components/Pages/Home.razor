@page "/"

@inject JsonConverterService JsonConverterService

<PageTitle>Home</PageTitle>

<MudStack>
    <MudText Typo="Typo.h4" GutterBottom="true">JSON to CSV Converter</MudText>
    <MudStack>
        <MudTextField @ref="_jsonTextField"
                      T="string"
                      Label="JSON"
                      Lines="3"
                      Variant="Variant.Outlined"
                      Error="@_jsonError"
                      ErrorText="@_jsonErrorText" />

        <MudTextField @ref="_csvTextField"
                      T="string"
                      Label="CSV"
                      Lines="3"
                      ReadOnly="true"
                      Variant="Variant.Outlined" />
    </MudStack>

    <MudStack Row="true">
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadJsonFile" Accept=".json">
            <ActivatorContent>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload">
                    Upload JSON File
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ConvertToCsvAsync">Convert</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@ClearAsync">Clear</MudButton>
    </MudStack>
</MudStack>

@code
{
    private MudTextField<string> _jsonTextField;
    private MudTextField<string> _csvTextField;
    private MudTextField<string> _jsonFilePathTextField;
    private bool _jsonError;
    private string _jsonErrorText;

    private async Task OpenCsvFileAsync()
    {
        await Task.CompletedTask;
    }

    private async Task ConvertToCsvAsync() => await ConvertJsonAndSetCsvText(_jsonTextField.Text);

    private async Task ConvertJsonAndSetCsvText(string json)
    {
        try
        {
            _jsonError = false;
            await _csvTextField.SetText(JsonConverterService.ConvertToCsv(json));
        }
        catch (Exception ex)
        {
            _jsonErrorText = $"Error: {ex.Message}";
            _jsonError = true;
            await Task.CompletedTask;
        }
    }

    private async Task ClearAsync()
    {
        await _jsonTextField.SetText(string.Empty);
        await _csvTextField.SetText(string.Empty);
    }

    private async Task UploadJsonFile(IBrowserFile file)
    {
        using var streamReader = new StreamReader(file.OpenReadStream());
        await _jsonTextField.SetText(await streamReader.ReadToEndAsync());
    }
}